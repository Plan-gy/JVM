package algorithm;
/**
 * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标
 * @author ASUS
 *
 */
public class NumberOne {
	public static void main(String[] args) {
		int[] nums = {2, 7, 11, 15};
		int target = 9;
		int[] twoSum = twoSum(nums,9);
		for (int i = 0; i < twoSum.length; i++) {
			System.out.println(twoSum[i]);
		}
	}
    public static int[] twoSum(int[] nums, int target) {
    	int[] result=new int[2];
        for (int i = 0; i < nums.length-1; i++) {
			for (int j = i+1; j < nums.length; j++) {
				if(nums[i]+nums[j]==target) {
					result[0]=i;
					result[1]=j;
				}
			}
		}
        return result;
    }
}














package algorithm;
/**
 * 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
 * @author ASUS
 *
 */
public class NumberTwo {
	public static void main(String[] args) {
		ListNode l1=new ListNode(2);
		ListNode l2=new ListNode(3);
		ListNode l3=new ListNode(4);
		ListNode l4=new ListNode(5);
		l1.next=l2;
		l2.next=l3;
		l3.next=l4;
		ListNode l5=new ListNode(5);
		ListNode l6=new ListNode(6);
		ListNode l7=new ListNode(7);
		ListNode l8=new ListNode(8);
		l5.next=l6;
		l6.next=l7;
		l7.next=l8;
		ListNode addTwoNumbers = addTwoNumbers(l1, l5);
		while(addTwoNumbers!=null) {
			System.out.print(addTwoNumbers.val);
			addTwoNumbers=addTwoNumbers.next;
		}
	}
	 public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		 	ListNode result=null;
			ListNode now=l1;
			ListNode now2=l2;
			int count=0;
			int count1=0;
			int[] l11=new int[100];
			int[] l21=new int[100];
			int x1=0;
			int x2=0;
			int v=1;
			int w=1;
			//反转l1
			while (now!=null) {
				l11[count]=now.val;
				x1=now.val*v+x1;
				count++;
				now=now.next;
				v=v*10;
			}
			while (l1!=null) {
				count--;
				l1.val=l11[count];
				l1=l1.next;
			}
	
			//反转l2
			while (now2!=null) {
				l21[count]=now2.val;
				x2=x2+now2.val*w;
				count1++;
				now2=now2.next;
				w=w*10;
			}
			while (l2!=null) {
				count--;
				l2.val=l11[count1];
//				System.out.println(l2.val);
				l2=l2.next;
			}
			int sum=x1+x2;
			int[] x3=new int[100];
			int index=0;
			while(sum!=0) {
				x3[index]=sum%10;
				sum=sum/10;
				index++;
			}
			int n=0;
			for (int i = 0; i < index; i++) {
				ListNode l=result;
				if(result==null) {
					result=new ListNode(x3[n]);
					result.next=null;
				}else {
					ListNode cur=new ListNode(x3[++n]);
					while(l.next!=null) {
						l=l.next;
					}
					l.next=cur;
				}
			}
			return result;
    }

}
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
//	@Override
//	public String toString() {
//		return "ListNode [val=" + val + "]";
//	}
}











package algorithm;
/**
 * 给你两个整数数组 arr1 和 arr2，返回使 arr1 严格递增所需要的最小「操作」数（可能为 0）。

每一步「操作」中，你可以分别从 arr1 和 arr2 中各选出一个索引，分别为 i 和 j，0 <= i < arr1.length 和 0 <= j < arr2.length，然后进行赋值运算 arr1[i] = arr2[j]。

如果无法让 arr1 严格递增，请返回 -1。
自己觉得没问题，但是说是有问题。

 * @author ASUS
 *
 */
public class Number1187 {
	public static void main(String[] args) {
		int[] arr1= {1,5,3,6,7};
		int[] arr2= {1,3,2,4};
	}
	public int makeArrayIncreasing(int[] arr1, int[] arr2) {
		int count=0;
		int cur=0;
		int[] temp=arr2;
		for (int i = 0; i < temp.length-1; i++) {
			for (int j = 0; j < temp.length-1-i; j++) {
				if(temp[j]>temp[j+1]) {
					int t=temp[j+1];
					temp[j+1]=temp[j];
					temp[j]=t;
				}
			}
		}
		for (int i = 0; i < arr1.length-1; i++) {

		    //找到前面比后面大的说明要调换。
			if(arr1[i]>arr1[i+1]) {
				cur=i;
				if(cur==0 && temp[0]<arr1[i]) {       //第一个就比第二个大，还比arr2的最小大，就赋给最小值。
					arr1[i]=temp[0];
					count++;
				}
				if(cur>0 && cur<arr1.length-1) {            //后面的值大，就还要考虑前面的值
					for (int j = 0; j < temp.length; j++) {
						if(arr1[cur]>temp[j] && arr1[cur-1]<temp[j] && arr1[cur+1]>temp[j]) {
							arr1[cur]=temp[j];
							count++;
						}else if(arr1[cur]>temp[j] && arr1[cur-1]<temp[j] && arr1[cur+1]==temp[j]) {
							arr1[cur]=temp[j];
							count++;
							i=cur-1;
						}
					}									
				}
			}else if(arr1[i]==arr1[i+1]){
				cur=i+1;
				if(cur>0 && cur<arr1.length-1) {            //后面的值大，就还要考虑前面的值
					for (int j = 0; j < temp.length; j++) {
						if(arr1[cur-1]<temp[j] && arr1[cur]<temp[j] && arr1[cur+1]>temp[j]) {
							arr1[cur]=temp[j];
							count++;
						}
					}									
				}
			}
						

						
					
		}
		return count>0?count:-1;
    }
}
