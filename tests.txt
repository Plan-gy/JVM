JDK包括java语言，JVM，java API类库     (Class文件格式   第三方类库)
java card 支持java小程序
java ME 支持java程序运行在移动终端的平台
java SE 支持面向桌面及应用   标准版
java EE 支持使用多层架构的企业应用
JDK1.1 技术代表 jar文件格式   JDBC   javaBeans   RMI      内部类   反射   97.2.19
JDK1.2 添加了strictfp关键字 和一系列Collections集合类 分为三个方面SE,EE,ME, 98.12.4
HotSpot虚拟机发布时是作为JDK 1.2的附加程序提供  后来成为默认虚拟机  99.4.27
JDK 1.3  数学运算和新的Time API 等类库 00.5.8
JDK 1.4 正则表达式，异常链，BIO，日志类，XML解析器和XSLT转换器  02.2.13
JDK 1.5 语法改动   自动装箱,泛型 丰台注解 枚举  可变长参数 遍历循环 concurrent 04.9.30
JDK 1.6 提供动态语言支持   编译API 卫星HTTP服务器   JVM内部做了改进 ，包括
锁与同步，垃圾收集，类加载	06.12.11
JDK 1.7 提供新的GI收集齐 加强对非java语言的调用支持 升级类加载架构等 
Sun Classic VM 第一个商用java虚拟机
Exact VM 以为使用准确是内存管理而得名。
HotSpot VM的技术优势  热点代码探测技术 热点探测能力可以通过执行计数器找到最
具有便益价值的代码   然后通知JIT编译器以方法为单位进行编译。
sun公司的其他虚拟机
KVM   K强调简单，轻量，高度可移植，但是运行速度比较慢
BEA JRockit专注于服务单应用 所以内部不包含解析器实现,全部代码都是及时编译器编译执行
IBM j9是一款设计上从服务器端到桌面应用再到嵌入式都全面烤炉的多用途虚拟机
Liquid VM 不需要操作系统的支持 或者说他自己本身实现了一个专有操作系统的必要功能
Apache Harmoney/Google Android Dalvik VM  只是虚拟机，不能成为java虚拟机
Dalvik VM 是Android平台的核心组成部分之一，使用寄存器架构而不是JVM常见的栈架构
在java8 中提供lambda支持，这将会极大的改善目前java语言不适合函数式编程的现状，
函数式编程的有点   这样的程序适合并行运行，
64位虚拟机   由于指针膨胀和各种数据类型对齐补白的原因，运行与64位系统上的java应用
需要消耗更多的内存，通常比32位的额外增加10%~30%的内存消耗，多个机构的测试结果
显示，64位虚拟机的运行速度在各个测试项中几乎全面禁落后于15%左右32位虚拟机




			自动内存管理机制

		java内存区域与内存溢出异常
java中虚拟机自动内存管理机制的帮助下，不在需要给每一个new操作去配对的delete/free
代码，不容易出现内存邪路和内存溢出的问题
2.2运行时数据区域
2.2.1程序计数器
	是一块较小的内存空间，可以看做当前线程锁执行的字节码的行号指示器
	改变这个计数器的值类选取吓一跳需要执行的字节码指令，分支，循环，跳转
	异常处理，线程恢复等基础功能都需要依赖这个计数器来完成
	为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序
	计数器，各条线程之间计数器后不影响，独立存储，成为"线程私有"的内存
	如果执行Native方法,计数器为空  此内存区域是唯一一个在java虚拟机规范中
	没有规定任何OutOfMemoryError情况的区域
2.2.2 java虚拟机栈
	也是线程私有的 生命周期和线程相同，	描述的是java方法执行的内存模型:
	每个方法在执行的同时都会常见一个栈帧，用于存储局部变量表，操作数栈，
	动态链接，方法出口     每个方法从调用直至执行完成的过程，就对应着一个
	栈帧在虚拟机栈中入栈和出栈的过程
	局部变量表存放了编译器克制的各种基本数据类型，对象引用，returnAddress
	64位的long和double数据会占用2个局部变量空间(Slot)其余数据类型占用1位
	局部变量表锁序的内存空间在编译器建完成分配，当进入一个方法是时，这个方法
	需要在帧中分配多大的局部边变量空间是完全确定的，运行期间不会改变大小
	规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度StackOver
	flowError异常 如果虚拟机栈可以动态扩展,无法申请足够内存 OutOfMemoryError
2.2.3 本地方法栈
	本地方法栈与虚拟机栈所发挥的作用非常相似   区别是虚拟机栈为虚拟机执行java
	方法(也就是字节码)服务，而本地方法栈则为虚拟机使用到的Native方法服务
	本地方法栈也会抛出哪两个异常
2.2.4 java堆
	java堆是java虚拟机所管理的内存中最大的一块，是被所有线程共享的一块内存
	虚拟机启动时，java对就是存放对象实例，几乎所有的对象实例都在这里分配内存
	所有的对象实例以及数组都要在堆上分配
	java堆是垃圾收集器管理的主要区域，因此也被成为"GC堆"
	现在收集齐基本都采用分带收集算法   java堆还细分为 新生代和老年代
	java堆中可能划分多个线程私有的分配缓冲区       不论如何划分，都与存放内容
	无关，无论哪个区域，存放的都仍然是对象实例
	java堆可以处于物理上不连续的内存空间，只要逻辑上是连续的即可
	如果在堆中没有完成实例分配，并且堆在无法在扩展时,抛出OutOfMemoryError
2.2.5方法区
	是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量
	即时编译器编译后的代码等数据。
	JDK1.7的HotSpot中，把原本放在永久代的字符串常量池移除
	这个区域的内存回收目标是针对常量池的回收和对类型的卸载
	当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError
2.2.6 运行时常量池
	运行时常量池是方法区的一部分。用于存放编译器生成的各种字面量和符号引用
	这部分内容将在类加载后进入方法区的运行时常量池中存放
	除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储
	运行时常量池相对于Class文件产量吃的另外一个特征就是具备动态性
	java语言并不邀请常来那个一定只有编译器才能产生，也就是并非预置入Class
	问阿金中常量池的内容才能进入方法区运行时常量池，运行期间可能将新的常量
	放入池中    当常量池无法在申请到内存会抛出OutOfMemoryError
2.2.7  直接内存
	并不是虚拟机运行时数JDK1.4据区的一部分，也不是java虚拟机规范中定义的内存区域
	JDK1.4新加入NIO ，引入了一种基于通道与缓冲区的IO方式，可以使用Native
	函数库直接分配堆外内存，然后通过一个存储在java对中的DirectByteBuffer对象
	作为这块引用进行操作
2.3.1 对象的创建
	首先先进行类加载过程
	     首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并
	检查是否已被加载，解析和初始化，没有就进行类加载
	在分配内存大小    对象所需内存大小在类加载完后就可以确定
	   指针碰撞: java堆中内存时规整的，一遍是空闲，一遍是使用的，中间一个指针
	作为分界线   只要将指针想空闲空间那边罗东一段与对象大小相等的距离即可
	   空闲列表:java堆中内存不是规整的   哪虚拟机就必须维护一个别聊，记录那些
	内存可以使用，分配时从列表中找到一块足够大的空间划分即可
         java堆是否规整又由锁采用的垃圾收集器是否带有压缩整理功能决定
	在虚拟机要对对象记性必要的设置
	执行new指令后，会执行<init>方法，把对象按照程序员的意愿进行初始化
2.3.2 对象的内存布局
	分为3块区域  对象头    实例数据     对齐填充   (HotSpot虚拟机)
	对象头包含两部分信息  第一部分用于存储对象自身的运行时数据:哈希码，锁等
	Bimap结构会根据对象的状态复用自己的存储空间
	另一部分是类型指针:及对象正想它的类元数据的指针   虚拟机用来确定是哪个类
	查找对象的元数据信息并不一定要经过对象本身，
	实例数据部分是对象真正存储的有效信息
	对齐填充就是对象的大小必须是8字节的整数倍，没有对齐要不起
2.3.3 对象的访问定位
	建立对象时为了使用对象，问的java程序需要通过栈上的reference数据来操作堆上
	具体对象。由于reference类型在java虚拟机规范中值规定了一个纸箱对象的应用，
	并没有定义这个引用应该通过何种方式去定位，访问堆中对象的具体位置。
	句柄访问:java堆划分一块内存作为句柄池，reference存储对象的句柄地址
		句柄中包含了对象实例数据与类型数据各自的地址信息
	直接指针:java堆对象的布局就必须考虑如何存放访问类型数据的相关信息
		reference中存储的直接就是对象地址
            使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被
	只会改变句柄中的实例数据指针，而reference本身不需要修改。   直接指针就是
	速度快，节省了一次指针定位的时间开销，
2.4 OOM异常
堆的最小值-Xms   最大值-Xmx	栈容量-Xss
在单个线程下，无论是由于栈帧太大还是虚拟机栈容量太小，当内存无法分配的时候，虚拟机
抛出的都是StackOverflowError异常
String.intern()是一个Native方法，作用：如果字符串常量池中已经包含一个等于此String
对象的字符串，则返回代表持中这个自妇产的String对象，否则将此String包含的字符串添加
到常量池中，并且返回此String对象的引用。
在JDK1.6中intern()方法会把首次遇到的字符串实例赋值到永久代中，返回的也是永久代中
这个字符实例的引用，而由于StringBuilder创建的字符串实例在java堆中，所以不是同一个
引用，而JDK1.7的intern()实现不会重复实例，只是在常量池中记录首次出现的实例引用。






		3、垃圾回收器和内存分配策略
程序计数器，虚拟机栈，本地方法栈随着线程存活，栈中的栈帧随着方法的进入和退出而
有条不紊的执行者出栈和入栈操作，每一个栈帧中分配多少内存基本上是在类结构确定的。
java堆和方法区不同，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个
分支需要的内存也可能不一样，只有在程序处于运行期间才知道创建那些对象。
内存分配和回收是动态的，
		那些内存需要回收
		什么时候回收
		如何回收
3.2对象已死吗？
引用计数算法:给对象中添加一个引用计数器，每当一个地方医用它时，计数器值就+1，当
引用失效，就-1，任何时刻计数器值为0的对象就是不可能在被使用。
	主流的java虚拟机里面没有选取引用计数算法来管理内存，其中最主要的原因
是它很难解决对象之间相互循环引用的问题。
可达性分析算法判断对象是否存活：通过一系列成为"GC Roots"的对象作为起始点，从这些
节点开始向下搜索，搜索走过的路径成为引用链，当一个对象到	GC Roots没有任何引用链
相连时，就证明此对象不可用，判定为可回收的对象。
JDK1.2后，java将引用分为强引用，软引用，弱引用，虚引用，引用强度一次减弱。
强引用：类似"Object o=new Object()"引用，
	只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象
软引用：描述一些还有用但并非必须的对象。SoftReference类去实现软引用
	将要发生内存引出异常之前，将会把这些对象列入回收范围之中进行二次回收。
弱引用：描述一些非必须的对象。被弱引用关联的对象只能生存在下一次垃圾收集之前。
	WeakReference类实现弱引用。
虚引用：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过
	虚引用来取得一个对象实例。唯一目的就是呢能在对象被收集器回收收到系统通知
	PhantomReference类实现虚引用。
3.2.4	对象真正死亡，至少要经理两次标记过程
如果对象在进行可达性分析后发现没有相连接的引用链，则会第一次标记并进行下一次筛选
筛选条件就是对象是否有必要执行finalize()方法，没覆盖或虚拟机调用过视为没必要执行
如果有必要执行方法。那么对象将放置在一个F-Queue队列中。稍后由一个虚拟机自动建立
，低优先级的Finalizer线程去执行。执行时虚拟机会触发方法，但不承诺等待运行结果。
如果对象在finalize()中拯救自己——重新与引用链的任何一个对象建立关联。
3.2.5 	回收方法区
java虚拟机规范中，可以不要求虚拟机在方法区实现垃圾收集，而且在方法区中进行垃圾收集
的性价比一般比较低，在堆 中，尤其是新生代中，常规应用进行一次垃圾收集一般可以达到
70%~95%的空间，而永久代的垃圾收集效率远低于此。
	永久代垃圾收集主要回收两部分内容：废弃常量和无用的类。
	无用的类：1、该类所有实例被回收，java堆中不存在该类的任何实例。
		2、加载该类的CllassLoader被回收
		3、该类对应的java.lang.Class对象没有在任何地方被引用，无法在
			任何地方通过反射访问该类的方法。
3.3垃圾收集算法。
标记-清除算法首先标记处所有需要回收的对象，在标记完成后同一回收所有被标记的对象。
不足：1、效率问题，标记和清除效率都不高
2、空间问题，标记清除后会产生大佬不连续的内存碎片，空间碎片太多可能会导致以后在
程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不触发另一次垃圾收集
复制算法：将可用内存容量划分为大小相等的两块，每次只使用其中一块，当这一块用完了，
就将还存货的对象复制到另外一块，然后再把已使用的内存空间一次清理掉。
	实现简单，运行高效		缺点：将内存缩小为原来的一半，
          IBM公司专门研究表明，新生代的对象98%是朝生夕死，将内存分为一块较大的Eden
和两块较小的Survivor空间，每次使用Eden和其中一块Survivor，当回收时，将Eden和
Survivor还存活的对象一次向赋值到另一个Survivor，在清理空间
	当Survivor空间不够用时，需要依赖其他内存(值老年代)进行分配担保
标记--整理算法：标记过程仍然和"标记--清除"一样，帆不是直接对可回收对象进行清除，而
是让存活的对象向一端移动，然后直接清理掉段边界以外的内存。
分代收集算法：根据对象存活周期的不同将内存划分为几块。一般是把java堆分为新生代和
老年代，这样就可以根据各个年代的特点采用最适合的收集算法。、
在新生代中每次垃圾收集都发现有大批对象死去，少量存活，使用复制算法。
在老年代中因为对象存活率高，没有额外空间进行分配担保，就要使用标记--清理/整理算法
安全点：程序执行时并非在所有都能停顿下来开始GC，只有在到达安全点时才能暂停
GC发生时如何让所有线程到最近的安全点停顿  抢先试中断和主动式中断。
抢先：将所有线程中断，没在安全点就启动线程跑到安全点，现在几乎没有虚拟机使用
主动：当GC需要中断线程的时候，不直接对线程操作，仅仅简单的设置一个标志，各个线程
执行时主动去轮训这个标志，发现中断标志为真时就自己中断挂起，轮询标志的地方和
	安全点是重合的。
安全区域是指在一段代码片段之中，引用关系不会发生变化。在这个区域中，任意地方
开始GC都是安全的，可以看做扩展的安全点。
在线程执行到安全区域的代码，首先表示自己进入安全区域，这样在这段时间里JVM要发起
GC，就不用管表示为在安全区域的线程了。
3.5 垃圾收集器
Serial收集器：是一个单线程的收集器，并不仅仅是只会使用一个CPU或一条收集线程去完成
垃圾收集工作，它在进行垃圾收集时，必须暂停其他所有的工作线程，直至收集结束。新生代
PerNew收集器：就是Serial收集器的多线程版本,除了使用多条线程进行垃圾收集之外,都一样
(可用的所有空指针参数,收集算法,对象分配规则,回收策略等)       新生代
除了Serial收集器外，就只有ParNew能与CMS(Cocurrent Mark Sweep)收集器配合工作。
Parallel Scavenge收集器：
	新生代收集器，使用复制算法的收集器，并行的多线程收集器
特点:|CMS等收集器的关注点是尽可能的缩短垃圾收集时用户线程的停顿时间，而Parallel S
收集器的目的是达到一个可控制的吞吐量。
PS收集器提供了两个参数用于精确控制吞吐量,最大垃圾收集停顿时间-XX:MaxGCPauseMillis
以及吞吐量大小的-XX:GCTimeRatio参数。		成为"吞吐量优先"收集器
-XX:+UseAdaptiveSizePolicy开关参数,打开就不需要手工指定新生代的大小,Eden Survivor
的比例，晋升老年代对象年龄等细节参数。虚拟机会根据当前系统运行情况收集性能监控信息
动态调整参数和停顿时间或最大吞吐量，成为GC自适应的调节策略
Serial Old收集器：
	是Serial收集器的老年代版本。单线程   标记整理算法    Client模式的虚拟机使用
如果在server模式下，1、在JDK1.5和以前的版本与Parallel Scavenge收集器搭配使用
2、作为CMS(并发收集器 垃圾收集线程和用户线程同时工作)收集器的后备预案。
Parallel Old收集器：
Parallel Scavenge收集器的老年代版本     多线程     标记整理算法    JDK1.6后提供
CMS收集器(Concurrent Mark Sweep)
是一种以获取最短回收停顿时间为目标的收集器。	基于"标记-清除"算法
初始标记：标记一下GC Roots能直接关联的对象，速度很快。  	stop the world
并发标记：进行GC Roots Tracing的过程。	stop the world
重新标记：修正并发标记期间因用户程序继续运行而导致标记产生变动的部分对象的标记记录
	停顿时间比初始化标记稍长，比并发标记时间短。
并发清除：
因为耗时最长的并发标记和并发清除过程收集器线程都可以和用户线程一起工作。所以总体
上CMS收集器的内存回收过程是与用户线程一起并发执行的，
优点：并发收集，低停顿，sun公司一些官方文档称之为并发低停顿收集器。
缺点：1、对CPU资源很敏感	2、无法处理浮动垃圾      3、清除后会有大量的空间碎片。
由于CMS并发清理阶段用户线程还能运行,伴随程序运行自然就还会有新的垃圾产生,这部分
垃圾出现在标记过程之后,CMS无法当次处理,只好留在下一次GC处理,这部分叫做浮动垃圾
1：CMS默认启动的回收线程数是(CPU数量+3)/4，当CPU数量>4且增大，而占得资源减少
2：CMS收集器不能像其他收集器那样等到老年代几乎完全被填满在进行收集，要预留一些
部分空间提供并发收集时的程序运作使用。
3：-XX:UseCMSCompactAtFullCollection开关参数(默认开启)，用于在CMS收集器顶不住
要进行FullGC时开启内存碎片的合并整理过程，内存整理无法并发，停顿时间边长。
G1收集器：面向服务端应用的垃圾收集器。
并行和并发：可以利用多个CPU缩短停顿时间，使用并发让java程序继续执行。
分代收集：采用不同的方式去处理新创建的对象和存活一段是假，熬过多次GC的旧对象
空间整合：整体看是标记整理算法	局部看是赋值算法。	不会产生空间碎片。
可预测的停顿：除了追求低停顿，还能建立可预测的停顿时间模型，能让使用者明确指定在
一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。
G1将整个java堆分为多个大小相等的独立区域(Region),新生代和老年代是一部分region集合
G1跟踪各个Region自恋的垃圾堆积的价值大小，在后台维护一个优先李彪，每次根据允许的
收集时间，优先回收价值最大的Region，保证了优先时间可以获取尽可能高的收集效率
G1中每个Region都有一个Temembered Set，虚拟机发现程序对Reference类型的数据进行
写操作，会产生一个Write Barrier暂时中断写操作，检查引用的对象是否位于不同Region，
是就通过CardTable把相关引用信息记录到被引用对象所属的Region的RS中。
初始标记：标记一下GC Roots能直接关联到的对象，并修改TAMS的值。耗时较短
并发标记：从GC Roots开始对堆中对象进行可达性分析，找出存活的对象。耗时较长
	与用户程序同时执行。
最终标记：修正在并发标记期间因用户程序继续运作而标记产生非变动的标记记录。
筛选回收：对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间制定
GC日志
[Full GC 283.736:[ParNew:261599k->261599(261952),0.0000288 secs],****->****(***)]
方括号内部的"261599k->261599(261599)"表示GC前盖内存使用容量->GC后使用内存
(总的内存区域容量)，后面的"***->***(***)"表示GC前java堆使用容量->GC后java堆使用的
(总的java堆容量)后面的**** secs表示内存区域GC所占用的时间 单位是秒。
3.6	内存分配与回收策略
对象优先在Eden分配
	当Eden区没有足够空间进行分配，虚拟机将发起一次Minor GC
大对象直接进入老年代	大对象：需要大量连续内存空间的java对象。
	虚拟机提供参数-XX:PretenureSizeThreshold,让大雨这个设置值的对象直接在
老年代分配，这样就是避免在Eden区及两个Survivor区之间发生大量的内存赋值。
长期存活的对象将进入老年代
	虚拟机给每个对象设置了对象年龄计数器，如果对象在Eden出生并经过第一次
Minor GC后仍然存活，并且被Survivor容纳，就被移到到Survivor空间，年设为1，
每次在Survivor区经过一次Minor GC年龄就+1；
	-XX:MaxTenuringThreshold=?设置老年代的年龄。
动态对象年龄判定
	如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，
年龄大于或者等于的对象就可以直接进入老年代，无序等到要求年龄。
空间分配担保
	在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于
新生代所有对象总空间，如果条件成立，那么Minor GC可以确保是安全的。如果失败，则
虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续
检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将
尝试进行一次Minor GC 尽管是有风险的，如果小于，就改为Full GC






		4、虚拟机性能监控与故障处理工具
4.2.1	jps：虚拟机进程状况工具
	jps(JVM Process Status Tool)名字像UNIX的ps命令，功能也类似：可以列出
正在运行的虚拟机进程，并显示虚拟机执行主类(Main Class，main()函数所在的类)名称以及
这些进程的本地虚拟机唯一ID，使用频率最高的JDK命令行工具。
jps可以通过RMI协议查询 开启了RMI服务的远程虚拟机进程状态，hositid为RMI注册表中
注册的主机名，-q只输出LVMID，省略主类的名称	-m输出虚拟机进程启动时触电给main
的参数	-l输出主类的全名，如果jar输出路径	-输出虚拟机进程启动时JVM参数。
jps命令格式 jps [options][hostid]
4.2.2	jstat：虚拟机统计信息监视工具
	用来监视虚拟机各种运行状态信息的命令行工具。可以显示本地或者远程虚拟机
进程中的类装载，内存，垃圾收集，JIT编译等运行数据，
如果是本地虚拟机进程，VMID,LVMID格式一致
jstat命令格式：jstat[option vmid [interval[s|ms][count]]]
4.2.3	jinfo：java配置信息工具
	作用：实时的查看和调整虚拟机各项参数。
如果想知道未被显示指定的参数的系统默认值，可以使用jinfo的-flag选型进行查询。
-sysprops可以把虚拟机的System.getPropertise()的内容打印出来。
jinfo命令格式：jinfo[option]pid
4.2.4	jmap：java内存影响工具
	用于生成堆转储快照(一般称为heapdump或dump文件)
不仅仅可以获取dump文件，还可以查询finalize执行队列，java堆和永久代的详细信息。
jmap命令格式：jmap[option]vmid
4.2.5	jhat：虚拟机堆转储快照分析工具
	jhat和jmap搭配使用，分析jmap生成的堆转出快照。
4.2.6	jstack：java堆栈跟踪工具
	用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)
线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要
目的是定位线程出现长时间停顿的原因，如线程间死锁，死循环，请求外部资源导致长等待
jstack命令格式：jstack[option]vmid
4.2.7	HSDIS：JIT生成代码反汇编
	作用：让HotSpot的-XX:+PrintAssembly指令调用它来把动态生成的本地代码
还原为汇编代码输出，同时还生成了大量非常有价值的注释，这样就可以分析出问题。
4.3		JDK的可视化工具
JConsole和VisualVM是两个功能强大的可视化工具
JConsole在JDK1.5时期就已经提供虚拟机监控工具，VisualVM在JDK 1.6 Update7首次发布
4.3.1	JConsole：java监视与管理控制台
	JConsole是一种基于JMX的可视化监视，管理工具。支队JMX MBean进行管理
Integer.valueOf()方法基于产生烧创建次数和节省内存，[-128,127]之间的数字会被缓存。
如果传入的参数在这个范围内，将直接返回缓存中的对象。
4.3.2	VisualVM：多合一故障处理工具
	到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，
优点：不需要被监视的程序基于特殊Agen运行，因此它对应用程序的实际性能的影响很小。
VisualVM是基于NetBeans平台开发的具备了插件扩展功能的特性，
	显示虚拟机进程以及进程的配置，环境信息jps，jinfo
	监视应用程序的CPU,GC,堆，方法去以及线程的信息 (jstat,jstack)
	dump以及分析堆转储快照（jmap，jhat）
	方法级的程序运行性能分析，找出被调用醉倒，运行时间最长的方法
	离线程序快照：收集程序的运行时配置，线程dump，内存dump等信息建立快照
具备很强的向下兼容性





		5、调优案例分析与实战
在高性能硬件上部署程序，有两种方式
通过64位JDK来使用大内存
使用若干个32位虚拟机建立逻辑集群来利用硬件资源。
5.2.2集群间同步导致的内存溢出
NAKACK栈用于保障各个包的有效顺序及重发，由于信息有传输失败的可能性，在确认所有
注册在GMS的节点都收到正确的信息前，发送的信息必须保留在内存中
在服务过程中，旺旺一个页面会产生数次请求，因此这个过滤器导致集群各个节点之间网络
交互非常频繁，当网络情况不能满足传输要求是，重发数据在内存中不断堆积，很快就溢出
5.2.3堆外内存导致的溢出错误	
垃圾收集时，虚拟机虽然会对Direct Memoeru进行回收，但是却不能像新生代，老年代那样
发现空间不足了就通知收集器进行垃圾回收，它只能等待老年嗲满了后Full GC，顺便清理
内存的飞起对象。负责就只能等待到抛出内存溢出羊场时，先catch掉
5.2.4外部命令导致系统缓慢
每个用户请求的处理都需要执行一个外部shell脚本来获得系统的一些信息,执行这个shell脚本
是通过java的Runtime.getRuntime().exec()来调用的。这种调用法师可以达到目的，但是它
在java虚拟机中是非常消耗资源的操作，及时外部命令很快就执行完毕，频繁调用是创建进程
的开销也非常可观。java虚拟机执行这个命令的过程是：首先克隆一个和当前虚拟机拥有一样
环境变量的进程，在用这个心的进程去执行外部命令，最后退出。
5.2.5服务器JVM进程崩溃
5.2.6不恰当数据结构导致内存占用过大
parnew收集器使用的是赋值算法，这个算法的高效是建立在大部分对象时朝生夕灭的特性
如果存活对象过多，吧对象赋值到survivor并维持对象引用是非常沉重的负担。
5.2.7由Windows虚拟内存导致的长时间停顿
虚拟机内置了两个运行时编译器，如果一段java方法被调用次数达到一定程度，就会被判定为
热带吗讲给JIT编译器及时编译为本地代码，提高运行速度。




			虚拟机执行子系统
		1、类文件结构
语言无关性越来越被重视
实现语言无关性的基础仍然是虚拟机和字节码存储格式。java虚拟机不和包括java在内的任何
语言绑定，值与Class文件这种特定的二进制文件格式关联。
6.3	Class类文件的结构
*任何一个Class、文件都赌赢这唯一一个类或接口的定义信息，反过来说，类或接口并不一定
都得定义在文件里。（也可以通过类加载器直接生成）
Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑的排列
在Class文件中，中间没有任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序
运行的必要数据，没有空隙存在。
Class文件格式采用一种类似于C语言结构体的微结构来存储数据，这种微结构中有两种数据
类型：无符号数和表。
无符号数属于基本的数据类型，用来描述数字、索引引用，数量盒子。u1表示1字节
表是由多个无符号数或者其他表作为数据项构成的复合数据类型，表以"_info"结尾，表示于
描述有层次关系的符合结构的数据
当需要描述同一类型但数量不定的多个数据，经常会使用一个其那只的容量计数器加若干个
连续的数据项的形式，称这一系列连续的某一类型的数据为某一类型的集合。
6.3.1魔数与Class文件的版本
每个Class文件的头4个字节成为魔数,作用是确定这个文件是否是一个能被虚拟机接收的Class
文件。	很多文件存储标准都使用魔数来进行身份识别：
文件格式的制定者可以自由的选择魔数，只要魔数黑没有广泛采用过同事不会引起混淆
紧接魔数的4个字节是Class文件的版本号，5,6,是次版本号，7,8，是主版本号
高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件。
6.3..2	常量池
紧接主次版本号之后就是常量池入口，常量池可以理解为Class文件之中的资源仓库。它是
Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件空间最大的项目之一
同时还是Class文件第一个出现的表类型数据项目。
由于常量池中常量不固定，所以在常量池入口放置u2类型的数据，代表常量池容量计数器
索引从1开始，0空出来有特殊考虑：满足后面某些指向常量池的索引值的数据在特定情况
下表达“不引用任何一个常量池项目”的含义，用0表示
常量池有2大类常量：字面量(常量:final,文本字符串)和符号引用
符号引用:类和接口的全限定名,字段的名称和描述符,方法 的名称和描述符
Class文件中不会保存各个方法，字段的最终内存布局信息，因此这些字段，方法的符号引用
不经过运行期转换的话无法得到真正的内存入口地址，无法直接被虚拟机使用。
常量池中每一项常量都是一个表。
JDK1.7之前有11中结构各不相同的表结构，JDK1.7加入3中表结构，这些表开始的第一位
是一个u1类型的标志位，代表当前这个常量属于那种常量类型。CONSTANT_***_info
tag用于区分常量类型，name_index是一个索引值指向常量池中一个Utf8类型常量
JDK的bin目录，用于分析Class文件季节吗的工具：javap
6.3.3	访问标志
常量池结束后，紧接着的2个字节代表访问标志，用于识别类或者接口层次的访问信息，包括
Class是类还是接口，是否定义为public类型，是否定义为abstract类型，是类，是否是final
access_flag一共有16个标志位，没有使用的标志位都是0.
0x0001     PUBLIC			0x0010	FINAL
0x0020	SUPER			0x0200	INTERFACE
0x0400	ABSTRACT		0x1000	SYNTHETIC
0x2000	ANNOTATION		0x4000	ENUM
6.3.4类索引，父类索引，接口索引集合
类索引，父类索引都是一个u2类型的数据，接口索引集合是一组us类型的数据的集合
Class文件由着三项数据来确定这个类的继承关系。类：确定这个类的权限定名	
父类：确定这个类的父类的全限定名。除了Object，所有java类的索引都不为0.
接口：就用来描述这个类实现了那些接口
对于接口索引集合，入口第一项——us类型的数据为接口计数器
6.3.5字段表集合
字段表用于描述接口或者类中声明的变量,变量包括类级变量以及实力级变量,不包括局部变量
各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来使用
接口之中的字段必须有ACC_PUBLIC,ACC_STATIC,ACC_FINAL标志,由java本身语言规则决定
跟随flags标志的是两厢索引值，name_index,descriptor_index。都是对常量池的引用
分别代表着字段的简单名称以及字段和方法的描述符。
全限定名是类的路径，将.换位/，为了连续使用“;”隔开
简单名称是指没有类型和参数修饰的方法或者字段名称
描述符的作用是用来描述字段的数据类型，方法的参数列表和返回值
基本数据类型和代表无返回值的void使用一个大写字符表示，对象类型使用L，J—long
二维数组：[[I	描述方法先参数列表，放在()中，后返回值
字段表集合中不会列出从超累或者负借口中继承而来的字段。java语言中字段是无法重载的
但是对于字节码，如果两个字段的描述符不一致，那么字段重名就是合法的
6.3.6方法表集合
方法表的结构依次包括了访问标志，名称索引，描述符索引，属性表集合
方法里面的java代码，经过编译器编译成字节码后，存放在方法属性表集合的"Code"属性里
java语言中，要重载一个方法，处理要与原方法具有相同的简单名称之外，还要求必须拥有
一个与原方法不同的特征签名。特征签名：方法中各个参数在常量池中的字段符号引用集合
6.3.7属性表集合
只要不予已有属性名重复，任何人实现的编译器都可以想属性表中希望如字段的属性信息
Code		方法表			java代码编译成的字节码指令
ConstatnValue	字段表			final关键字定义的常量值
Deprecated	类，方法表，字段表		被声明的deprecated的方法和字段
Exceptions	方法表			方法抛出异常
EnclosingMethod	类文件	仅当一个类为局部类或者匿名类，才能拥有的属性
。。。。。
对于每个属性，它的名称需要从常量池中引用CONSTANT_Utf8_info类型的常量表示
Code属性
max_locals的单位是slot，slot是虚拟机为局部变量分配内存锁使用的最小单位
byte char float int short boolean等长度不超过32位，每个局部变量占用一个slot
方法参数，显示异常处理器的参数，方法体中定义的局部变量都需要使用局部变量表来存放
数据交换，方法调用等操作都是基于栈的。
在任何势力方法里面，都可以通过this关键字访问到此方法所属的对象。这个访问机制对java
程序的编写很重要，而实现却很简单，仅仅是通过javac编译器编译的时候吧对this关键字的
访问转变为对一个普通方法参数的访问，然后在虚拟机调用实例方法是自动传入参数。
异常表是s行到e行(不包括e)出现了catch_type或者子类的异常，转到handler_pc行处理
2、Exceptions属性
作用：列举出方法中可能抛出的受查异常。就是方法描述是throws关键字后面的异常
3、LineNumberTable属性
作用：描述java源码行号与字节码行号(字节码的偏移量)之间的对应关系,
不是运行必要属性，但是默认会生成到Class文件中，使用-g:none,-g:lines取消或要求生成
4、LocalVariableTabel属性
作用:描述栈帧中局部变量表中的变量与java源码中定义的变量之间的关系,
不是运行必要属性，但是默认会生成到Class文件中，使用-g:none,-g:vars取消或要求生成
5、SourceFile属性
用于记录生成这个Class文件的源码文件名称.使用-g:none,-g:source取消或要求生成 可选的
6、ConstantValue属性
通知虚拟机自动为静态变量赋值。只有static关键字修饰的变量才可以使用这个属性。
对于非static类型的变量的赋值是在实例构造器<init>方法中进行
对于类变量，有2中方式：类构造器<clinit>方法，ConstantValue属性
Sun Javac编译器的选择：如果同时使用final和static修饰变量，并且这个变量的数据类型时
基本类型或者String，就生成ConstantValue属性进行初始化，如果这个变量没有被final修饰
或者并非基本类型及字符串，则选择类构造器<clinit>方法进行初始化
7、InnerClasses属性
用于记录内部类与苏主类之间的关联。
一个类中定义内部了类，那么编译器将会为它以及他所包含的内部类生成InnerClasses属性
8、Deprecated及Synthetic属性
属于标志类型的布尔属性，
D用于表示某个类，字段或者方法，已经被定为不在推荐使用@deprecated注释设置
S代表此字段或方法并不是由java源码直接产生的，而是编译器自行添加的。
9、StackMapTable属性
是一个复杂的变长属性，位于Code属性的属性表中。
这个属性会在虚拟机类加载的字节码验证阶段被新类型检查验证器使用，目前在与代替之前
比较消耗性能的基于数据流分析的类型推到验证器。
包含0到多个栈映射帧，每个栈映射帧都显示或隐式的代表一个字节码偏移量。用于表示该
执行到该字节码时局部变量表和操作数栈的验证类型。
一个方法的code属性最多只能有一个StackmapTable属性,否则会抛出ClassFormatError异常
10、Signature属性
可选属性，可以出现在类，属性表和方法表结构的属性表中。
记录泛型签名信息，java语言的泛型采用的是擦除法实现的伪泛型。
实现简单,但是无法像C#等真泛型支持的语言那样,将泛型类型与用户定义的普通类型同等对待
11、BootstrapMethods属性
复杂的边长属性,位于类文件的属性表中.用于保存invokedynamic指令引用的引导方法限定符
如果某个类文件结构的常量池中曾经出现过CONSTANT_InvokeDynamic_info类型的常量，
那么这个类文件的属性表中必须存在一个明确的BootstrapMethods属性，另外，及时出现
过多次，但也只能有一个BootstrapMethods属性。
6.4	字节码指令简介
java虚拟机的指令由一个字节长度的，代表着某种特定操作含义的数字以及跟随后面的0到
多个代表此操作锁序参数而构成。
由于限制了java虚拟机操作码的长度为一个字节，这意味这指令集的操作码总数不可能超过
256条；又由于Class文件格式放弃了编译后代码的操作数长度对齐，这就意味着虚拟机处理
那些超过一个字节数据的时候，不得不在运行时从字节中重建出具体数据的结构，
放弃操作数长度对齐，意味着可以省略很多填充和间隔符号
6.4.1字节码和数据类型
大多数的指令都包含了器操作所对应的数据类型信息。无条件跳转指令goto
java虚拟机的指令集对于特定的操作只提供了优先的类型相关指令去支持它，非独立
大多数关于boolean byte short char类型数据的操作都会进行扩展为int类型去运算
6.4.2加载和存储指令
用于将数据在栈帧中的局部变量表和操作数栈之间来回传输
将一个局部变量加载到操作栈	Tload
荆一个数值从操作数栈存储到局部变量表	Tstore
将一个常量加载到操作数栈	Tipush
扩充局部变量表的访问索引的指令：wide
6.4.3运算指令
用于对两个操作数栈上的值进行某种特定运算，并把结果存入到操作栈顶。
分为两种：对整形数据进行运算的指令和对浮点数据进行运算的指令
只有除法指令(idiv ldiv)以及求余指令(irem lrem)中当出现除数为0会抛出ArithmeticEx异常
浮点数运算的运算结果必须摄入到适当的精度，如果有两种可表示的形式与该值接近，将优先
选择最低有效位为0的。不会抛出任何运行时异常
如果某个结果没有明确的数学定义，将使用NaN表示，所有使用NaN值作为操作数的操作
都会返回NaN。
在Udinelong类型数值比较是，虚拟机采用带符号的比较方式，浮点数比较是，虚拟机采用
IEEE 754规范锁定义的无信号比较方式
6.4.4类型转换指令
将两种不同的数值类型进行相互转换。
int类型到long，float或者double类型
long类型到float，double类型
float类型到double类型
窄化类型数据转换可能会导致转换结果产生不同的正负号，不同的数量级的情况。精度丢失
浮点值转换为整数类型T(T仅限于int或者long)：如果浮点值为NaN，哪结果为0
如果浮点值不是无穷大，浮点值使用IEEE 754的向零舍入模式取整，v，v如果在范围内,结果
就是v否则，根据v的符号，转换为T所能你表示的最大或者最小整数
尽管数据类型窄化转换可能会发生上益下益，精确丢失等，但java虚拟机规范中明确规定
数值类型的窄化转换指令永远不可能导致虚拟机抛出运行时异常
6.4.5对象创建于访问指令
创建类实例的指令：new
创建数组的指令:newarray    anewarray    multianewarray
访问类字段和实例字段：getfield    putfield   getstatic    putstatic
吧一个数组元素加载到操作数栈的指令:baload  caload  saload   
将一个操作数栈的值存储到数组元素中的指令bastore  castore   sastore
取数组长度的指令   arraylength
检查类实例类型的指令   instanceof   checkcast
6.4.6操作数栈管理指令
将操作数栈的栈顶一个或两个元素出栈:pop   pop2
赋值栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶dup dup2 dup_x1 dup_x2
将栈最顶端的两个数值互换 swap
6.4.7控制转移指令
让java虚拟机有条件或无条件的从指定的位置指令而不是控制转移指令的下一条指令执行
6.4.8方法调用和返回指令
6.4.9异常处理指令
6.4.10同步指令
java虚拟机支持方法级和方法内部一段指令序列的同步，这两种同步结构都使用管程来支持




		7、虚拟机类加载机制
