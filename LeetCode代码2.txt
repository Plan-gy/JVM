package algorithm;
/**
 * 完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中
 * 在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点
 * @author ASUS
 *
 */
public class Number222 {
	public static void main(String[] args) {
		
	}
//	 public int countNodes(TreeNode root) {
//		 int count=0;
//		 
//		 if(root.left==null && root.right==null) {
//			 return 1;
//		 }
//		 if(root.left!=null) {
//			 countNodes(root.left);
//		 }else if(root.right!=null) {
//			 countNodes(root.right);
//		 }else {
//			 count+=1;
//		 }
//		 
//		 return count;
//	 }
	public int countNodes(TreeNode root) {
        if(root==null){
            return 0;
        }
		 return countNodes(root.right)+countNodes(root.left)+1;
	 }
}
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}






package algorithm;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

/**
 * 实现一个 MapSum 类里的两个方法，insert 和 sum。

对于方法 insert，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。

对于方法 sum，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。

示例 1:

输入: insert("apple", 3), 输出: Null
输入: sum("ap"), 输出: 3
输入: insert("app", 2), 输出: Null
输入: sum("ap"), 输出: 5
 * @author ASUS
 *
 */
public class Number677 {
    private HashMap<String, Integer> x1=new HashMap<String, Integer>();
	public static void main(String[] args) {
		System.out.println("asdfj".startsWith("as"));
	}
    public void insert(String key, int val) {
        x1.put(key, val);
        
    }
    
    public int sum(String prefix) {
        Set entrySet = x1.entrySet();
        int sum=0;
        for(Map.Entry<String,Integer> entry:x1.entrySet()) {
        	if(entry.getKey().startsWith(prefix)) {
        		sum+=entry.getValue();
        	}
        }
        return sum;
    }
}
